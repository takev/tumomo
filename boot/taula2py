#!/usr/bin/env python

import sys
from mmap import *
from struct import *


def t(l):
    return "    " * l

def pairs(p):
    return [(p[i], p[i+1]) for i in range(0, len(p), 2)]

class YAHeader (object):
    def __init__(self, buf):
        kind, length, position = unpack("!4sLQ", buf)
        self.kind = kind
        self.length = length
        self.size = YAHeader.align64(length)
        self.position = YAHeader.decode_position(position)

    def is_literal(self):
        return self.kind[0] == "#"

    @classmethod
    def decode_position(cls, position):
        return position

    @classmethod
    def align64(cls, length):
        return (length + 7) & 0xfffffffffffffff8

class YANode (object):
    def __init__(self, header):
        self.length = header.length
        self.size = header.size
        self.kind = header.kind
        self.position = header.position
        self.childs = []

    def add(self, child):
        self.childs.append(child)

    # Write python code to a string.
    def wp(self, l = 0):
        if self.kind == "@pas":
            return None

        elif self.kind in ("modu", "bloc"):
            return "\n".join(child.wp(l) for child in self.childs) + "\n"

        elif self.kind == ".   ":
            return ".".join(child.wp() for child in self.childs)

        elif self.kind in (
            "<<  ", ">>  ", "*   ", "//  ", "/   ", "%   ", "+   ", "-   ", "&   ", "^   ",
            "|   ", "is  ", "==  ", "!=  ", "<   ", ">   ", "<=  ", ">=  ", "and ", "or  ", "in  ",
        ):
            op = " " + self.kind.strip() + " "
            return op.join(child.wp() for child in self.childs)

        elif self.kind == "farg":
            name, expr = [child.wp() for child in self.childs]
            return name if expr is None else "%s=%s" % (name, expr)

        elif self.kind == "carg":
            name, expr = [child.wp() for child in self.childs]
            return expr if name is None else "%s=%s" % (name, expr)

        elif self.kind == "func":
            name = self.childs[0].wp()
            block = self.childs[-1].wp(l + 1)
            arguments = ",".join(child.wp() for child in self.childs[1:-1])
            return t(l) + "def %s(%s):\n%s\n" % (name, arguments, block)

        elif self.kind == "x() ":
            name = self.childs[0].wp()
            arguments = ",".join(child.wp() for child in self.childs[1:])
            return t(l) + "%s(%s)\n" % (name, arguments)

        else:
            raise NotImplementedError("Node '%s' unknown" % self.kind)

class YALiteral (YANode):
    def __init__(self, header, inner):
        YANode.__init__(self, header)

        if self.kind == "#id ":
            self.value = inner.decode("UTF-8")
        elif self.kind == "#str":
            self.value = repr(inner.decode("UTF-8"))
        elif self.kind[:2] in ("#i", "#u"):
            if self.kind == "#i64":
                (value,) = unpack("!q", inner)
            elif self.kind == "#u64":
                (value,) = unpack("!Q", inner)
            elif self.kind == "#i32":
                (value,) = unpack("!l", inner)
            elif self.kind == "#u32":
                (value,) = unpack("!L", inner)
            elif self.kind == "#i16":
                (value,) = unpack("!h", inner)
            elif self.kind == "#u16":
                (value,) = unpack("!H", inner)
            elif self.kind == "#i8":
                (value,) = unpack("!b", inner)
            elif self.kind == "#u8":
                (value,) = unpack("!B", inner)
            else:
                raise NotImplementedError("Literal type '%s' unknown" % (self.kind))
            self.value = repr(value)
        else:
            raise NotImplementedError("Literal type '%s' unknown" % (self.kind))

    def wp(self, l = 0):
        return self.value.encode("UTF-8")

def node_decode(buf):
    if len(buf) < 16:
        print >>sys.stderr, "!error: Not enough size to decode header."
        sys.exit(1)

    header = YAHeader(buf[:16])
    inner = buf[16:header.length]
    inner_length = len(inner)

    if header.is_literal():
        node = YALiteral(header, inner)

    else:
        offset = 0
        node = YANode(header)
        while offset < inner_length:
            child = node_decode(inner[offset:])
            offset+= child.size
            node.add(child)

    return node

def main(argv):
    if len(argv) != 2:
        raise RuntimeError("Need one file argument")

    filename = argv[1]

    fdin = open(filename, "rb")
    buf = mmap(fdin.fileno(), 0, MAP_SHARED, PROT_READ)

    tree = node_decode(buf)
    print tree.wp(0)

    buf.close()
    fdin.close()



if __name__ == "__main__":
    exit(main(sys.argv))

